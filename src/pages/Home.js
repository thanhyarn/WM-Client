import React, { useState, useEffect } from "react";
import {
  Table,
  Button,
  Select,
  Input,
  Row,
  Col,
  Modal,
  Card,
  Checkbox,
} from "antd";
import "./Home.css";
// import data from "./tmpData";

import { SearchOutlined } from "@ant-design/icons";
import SockJS from "sockjs-client";
import { useHistory } from "react-router-dom";
import toast from "react-hot-toast";
const { Option } = Select;
const { Search } = Input;

// H√†m chuy·ªÉn ƒë·ªïi k√Ω t·ª± c√≥ d·∫•u th√†nh kh√¥ng d·∫•u
const removeAccents = (str) => {
  return str
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/ƒë/g, "d")
    .replace(/ƒê/g, "D");
};

const Home = () => {
  const [data, setData] = useState([]);
  const [expandedRowKeys, setExpandedRowKeys] = useState([]); // Kh√≥a h√†ng m·ªü r·ªông
  const [selectedWarehouse, setSelectedWarehouse] = useState("0");
  const [searchTerm, setSearchValue] = useState("");
  const [totalProduct, setTotalProduct] = useState(0);
  const [currentProduct, setCurrentProduct] = useState(0);
  const [rawMaterial, setRawMaterial] = useState(0);
  const [finishedProduct, setFinishedProduct] = useState(0);
  const history = useHistory();

  const aggregateData = (items) => {
    // L·ªçc items d·ª±a tr√™n selectedWarehouse

    setTotalProduct(items.length);
    const filteredItems = items.filter(
      (item) => item.warehouse === selectedWarehouse
    );

    setCurrentProduct(filteredItems.length);

    // Chu·∫©n h√≥a searchTerm v√† l·ªçc th√™m d·ª±a tr√™n t√™n s·∫£n ph·∫©m
    const normalizedSearchTerm = removeAccents(searchTerm.toLowerCase());
    const furtherFilteredItems = filteredItems.filter((item) =>
      removeAccents(item.information.split(" - ")[0].toLowerCase()).includes(
        normalizedSearchTerm
      )
    );

    setRawMaterial(
      furtherFilteredItems.filter(
        (item) => item.classification_name === "Nguy√™n v·∫≠t li·ªáu"
      ).length
    );

    setFinishedProduct(
      furtherFilteredItems.filter(
        (item) => item.classification_name === "Th√†nh ph·∫©m"
      ).length
    );

    // Gom nh√≥m d·ªØ li·ªáu theo t√™n v√† ph√¢n lo·∫°i
    const grouped = furtherFilteredItems.reduce((acc, item) => {
      const name = item.information.split(" - ")[0]; // T√™n s·∫£n ph·∫©m
      const category = item.classification_name; // Ph√¢n lo·∫°i
      const key = `${name}-${category}`;

      if (!acc[key]) {
        acc[key] = {
          name,
          category,
          count: 0,
          data: [],
        };
      }
      acc[key].count += 1;
      acc[key].data.push({
        epc: item.epc,
        timestamp: item.timestamp
          ? new Date(item.timestamp).toLocaleString()
          : "Ch∆∞a t·ª´ng v√†o kho",
      });
      return acc;
    }, {});

    // Th√™m key cho m·ªói object
    return Object.values(grouped).map((item, index) => ({
      ...item,
      key: index + 1,
    }));
  };

  const handleViewHistory = (epc) => {
    console.log();
    localStorage.setItem("searchEpc", epc);
    localStorage.setItem("warehouse", selectedWarehouse);

    history.push("/tables");
  };

  const toastMessage = (epc, data, warehouse) => {
    // T√¨m s·∫£n ph·∫©m trong m·∫£ng data d·ª±a tr√™n epc
    const product = data.find((item) => item.epc === epc);

    if (product) {
      // Ki·ªÉm tra gi√° tr·ªã c·ªßa warehouse v√† hi·ªÉn th·ªã th√¥ng b√°o t∆∞∆°ng ·ª©ng
      if (warehouse === "0") {
        toast(`ƒê√£ c√≥ s·∫£n ph·∫©m ${product.information} r·ªùi kh·ªèi kho`, {
          icon: "üö™",
          style: {
            borderRadius: "10px",
            background: "#333",
            color: "#fff",
          },
          position: "top-right",
        });
      } else {
        toast(`ƒê√£ c√≥ s·∫£n ph·∫©m ${product.information} v√†o kho`, {
          icon: "üì¶",
          style: {
            borderRadius: "10px",
            background: "#333",
            color: "#fff",
          },
          position: "top-right",
        });
      }
    } else {
      toast.error("S·∫£n ph·∫©m kh√¥ng t√¨m th·∫•y trong d·ªØ li·ªáu");
    }
  };

  useEffect(() => {
    // G·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu khi component ƒë∆∞·ª£c mount
    fetch("http://localhost:3003/api/fetch-data")
      .then((response) => response.json())
      .then((data) => {
        console.log(data.arrayData);
        const newData = aggregateData(data.arrayData);
        setData(newData);
        console.log(newData);
      })
      .catch((error) => {
        console.error("Error fetching data:", error);
      });

    // Thi·∫øt l·∫≠p k·∫øt n·ªëi WebSocket
    const sock = new SockJS("http://localhost:8090/echo");
    console.log("sock ", sock);

    sock.onopen = function () {
      console.log("WebSocket connection open");
    };

    sock.onmessage = async function (e) {
      const newData = JSON.parse(e.data);
      console.log(newData.data);
      toastMessage(newData.epc, newData.data, newData.warehouse);
      await setData(aggregateData(newData.data));
    };

    sock.onclose = function () {
      console.log("WebSocket connection closed");
    };

    // D·ªçn d·∫πp khi component unmount
    return () => {
      sock.close();
    };
  }, [selectedWarehouse, searchTerm]);

  const columns = [
    { title: "T√™n m·∫∑t h√†ng", dataIndex: "name", key: "name" },
    {
      title: "Ph√¢n lo·∫°i",
      dataIndex: "category",
      key: "category",
      align: "center",
    },
    { title: "S·ªë l∆∞·ª£ng", dataIndex: "count", key: "count", align: "center" },
    // C·∫•u h√¨nh th√™m c√°c c·ªôt n·∫øu c·∫ßn
  ];

  // C·∫•u h√¨nh m·ªü r·ªông ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
  const expandable = {
    expandedRowRender: (record) => (
      <Table
        columns={[
          { title: "EPC", dataIndex: "epc", key: "epc" },
          {
            title: "Th·ªùi gian v√†o kho",
            dataIndex: "timestamp",
            key: "timestamp",
          },
          {
            title: "H√†nh ƒë·ªông",
            key: "action",
            render: (text, record) => (
              <Button onClick={() => handleViewHistory(record.epc)}>
                Xem l·ªãch s·ª≠ v·∫≠n chuy·ªÉn
              </Button>
            ),
          },
        ]}
        dataSource={record.data}
        pagination={false}
      />
    ),
    expandedRowKeys: expandedRowKeys,
    onExpand: (expanded, record) => {
      const keys = expanded ? [record.key] : [];
      setExpandedRowKeys(keys);
    },
  };

  const rowClassName = (record) => {
    if (record.category === "Nguy√™n v·∫≠t li·ªáu") {
      return "row-raw-material hover-bg";
    } else if (record.category === "Th√†nh ph·∫©m") {
      return "row-finished-product hover-bg";
    }
    return "hover-bg";
  };

  return (
    <div>
      <div className="mb-5">
        <Row gutter={[16, 16]}>
          <Col xs={24} sm={12} md={12} lg={6}>
            <Card
              className="border-l-4"
              bodyStyle={{ padding: "20px", backgroundColor: "#f0f4ff" }}
            >
              <h2 className={`text-3xl`}>{totalProduct}</h2>
              <p className="text-lg">T·ªïng s·∫£n ph·∫©m</p>
            </Card>
          </Col>
          <Col xs={24} sm={12} md={12} lg={6}>
            <Card
              className="border-l-4"
              bodyStyle={{ padding: "20px", backgroundColor: "#e0ffef" }}
            >
              <h2 className={`text-3xl`}>{currentProduct}</h2>
              <p className="text-lg">Hi·ªán t·∫°i</p>
            </Card>
          </Col>
          <Col xs={24} sm={12} md={12} lg={6}>
            <Card
              className="border-l-4"
              bodyStyle={{ padding: "20px", backgroundColor: "#fff4e6" }}
            >
              <h2 className={`text-3xl`}>{rawMaterial}</h2>
              <p className="text-lg">Nguy√™n v·∫≠t li·ªáu</p>
            </Card>
          </Col>
          <Col xs={24} sm={12} md={12} lg={6}>
            <Card
              className="border-l-4"
              bodyStyle={{ padding: "20px", backgroundColor: "#ffe4e6" }}
            >
              <h2 className={`text-3xl`}>{finishedProduct}</h2>
              <p className="text-lg">Th√†nh ph·∫©m</p>
            </Card>
          </Col>
        </Row>
      </div>
      <Row
        gutter={[16, 16]}
        style={{
          marginBottom: 16,
          display: "flex",
          justifyContent: "space-between",
        }}
      >
        <Col>
          <Select
            defaultValue="0"
            placeholder="Ch·ªçn Kho"
            onChange={(value) => setSelectedWarehouse(value)}
            style={{ width: 150 }}
          >
            <Option value="0">Ngo√†i kho</Option>
            <Option value="1">Kho 1</Option>
            <Option value="2">Kho 2</Option>
            <Option value="3">Kho 3</Option>
          </Select>
        </Col>
        <Col>
          <Input
            placeholder="T√¨m ki·∫øm"
            onChange={(e) => setSearchValue(e.target.value)}
            style={{ width: 200 }}
          />
        </Col>
      </Row>

      {/* <h1 style={{ fontSize: "30px" }}>{data}</h1> */}

      <Table
        className="bg-white shadow-lg rounded-lg overflow-hidden"
        columns={columns}
        dataSource={data}
        expandable={expandable}
        rowClassName={rowClassName}
      />
    </div>
  );
};

export default Home;
